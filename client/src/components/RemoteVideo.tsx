import { useEffect, useRef, useState } from "react";

interface RemoteVideoProps {
  participantId: string;
  stream: MediaStream;
  isLocal?: boolean;
}

export const RemoteVideo = ({ participantId, stream, isLocal = false }: RemoteVideoProps) => {
  const [isVideoReady, setIsVideoReady] = useState(false);
  const videoRef = useRef<HTMLVideoElement>(null);

  // –û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞
  useEffect(() => {
    const video = videoRef.current;
    if (!video || !stream) return;

    console.log(`üé• RemoteVideo setup for ${participantId}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const videoTrack = stream.getVideoTracks()[0];
    if (videoTrack) {
      console.log(`üîç Track details for ${participantId}:`, {
        id: videoTrack.id,
        enabled: videoTrack.enabled,
        muted: videoTrack.muted,
        readyState: videoTrack.readyState
      });
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ç—Ä–µ–∫
      videoTrack.enabled = true;
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫
    video.srcObject = stream;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
    const rect = video.getBoundingClientRect();
    console.log(`üß™ Video size for ${participantId}:`, rect.width, rect.height);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ
    const tryPlay = () => {
      video
        .play()
        .then(() => {
          console.log(`‚úÖ Video play() successful for ${participantId}`);
          console.log(`üì∫ Paused after play? ${participantId}:`, video.paused);
          setIsVideoReady(true);
        })
        .catch((err) => {
          console.warn(`‚ö†Ô∏è Video play() failed for ${participantId}:`, err);
        });
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    const dataLoadedHandler = () => {
      console.log(`üé¨ onloadeddata for ${participantId}`);
      tryPlay();
    };

    video.onloadeddata = dataLoadedHandler;

    // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ 500–º—Å
    const forcePlayTimeout = setTimeout(() => {
      if (video.readyState < 2) {
        console.log(`‚åõ Forcing video play for ${participantId}`);
        tryPlay();
      }
    }, 500);

    // Fallback hack –¥–ª—è –æ–±—Ö–æ–¥–∞ content isolation: —Å–∫—Ä—ã—Ç—ã–π –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const helperVideo = document.createElement('video');
    helperVideo.srcObject = stream;
    helperVideo.muted = true;
    helperVideo.autoplay = true;
    helperVideo.playsInline = true;
    Object.assign(helperVideo.style, {
      position: 'absolute',
      width: '1px',
      height: '1px',
      opacity: '0.001',
      pointerEvents: 'none',
    });
    document.body.appendChild(helperVideo);

    helperVideo.play().catch(err => {
      console.warn('‚ö†Ô∏è Helper video failed to play:', err);
    });

    return () => {
      clearTimeout(forcePlayTimeout);
      video.onloadeddata = null;
      video.srcObject = null;
      try {
        document.body.removeChild(helperVideo);
      } catch (e) {
        // Ignore if already removed
      }
    };
  }, [stream, participantId]);

  return (
    <div
      className={`remote-video-container ${isVideoReady ? 'ready' : 'loading'}`}
      data-participant-id={participantId}
      style={{
        position: 'relative',
        overflow: 'hidden',
        borderRadius: '8px',
        backgroundColor: '#000',
      }}
    >
      <video
        ref={videoRef}
        autoPlay
        playsInline
        muted={isLocal}
        style={{
          width: '100%',
          height: '100%',
          objectFit: 'cover',
          display: 'block',
          minWidth: '160px',
          minHeight: '120px',
          backgroundColor: '#000',
          border: isVideoReady ? '1px solid transparent' : '1px solid #555',
        }}
      />

      {!isVideoReady && (
        <div
          style={{
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            color: '#fff',
            background: 'rgba(0,0,0,0.6)',
          }}
        >
          –û–∂–∏–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ...
        </div>
      )}
    </div>
  );
};
