import { useEffect, useRef, useState } from "react";

interface RemoteVideoProps {
  participantId: string;
  stream: MediaStream;
}

export const RemoteVideo = ({ participantId, stream }: RemoteVideoProps) => {
  const [isVideoReady, setIsVideoReady] = useState(false);
  const [isKilled, setIsKilled] = useState(false);
  const videoRef = useRef<HTMLVideoElement>(null);
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç—É video
  useEffect(() => {
    const video = videoRef.current;
    if (!video || !stream) return;
    
    console.log(`RemoteVideo: Setting up video for ${participantId}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const handleLoadedMetadata = () => {
      console.log(`‚úÖ Metadata loaded for ${participantId}`, {
        width: video.videoWidth,
        height: video.videoHeight,
        readyState: video.readyState
      });
      
      // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –≥–æ—Ç–æ–≤—ã–º
      if (video.videoWidth > 0 && video.videoHeight > 0) {
        setIsVideoReady(true);
      }
    };
    
    const handlePlaying = () => {
      console.log(`‚ñ∂Ô∏è Video playing for ${participantId}`);
      setIsVideoReady(true);
    };
    
    const handleError = (e: Event) => {
      console.error(`‚ö†Ô∏è Video error for ${participantId}:`, e);
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    video.addEventListener('loadedmetadata', handleLoadedMetadata);
    video.addEventListener('playing', handlePlaying);
    video.addEventListener('error', handleError as EventListener);
    
    // –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω—É–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    video.srcObject = null;
    
    // –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
    video.srcObject = stream;
    
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ—Ç–æ–∫–∞
    setTimeout(() => {
      if (video) {
        video.play()
          .then(() => console.log(`‚ñ∂Ô∏è Video play() succeeded for ${participantId}`))
          .catch(err => console.warn(`‚ö†Ô∏è Video play() failed for ${participantId}:`, err));
      }
    }, 200);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    setTimeout(() => {
      if (video && (!video.videoWidth || !video.videoHeight)) {
        console.log(`üîÑ Retrying play() for ${participantId}`);
        video.play().catch(err => {});
        
        // –ï—Å–ª–∏ –≤–∏–¥–µ–æ —Ç–∞–∫ –∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –≥–æ—Ç–æ–≤—ã–º –ø–æ —Ç–∞–π–º–∞—É—Ç—É
        if (!isVideoReady) {
          console.log(`‚è±Ô∏è Setting video ready by timeout for ${participantId}`);
          setIsVideoReady(true);
        }
      }
    }, 1000);
    
    return () => {
      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      video.removeEventListener('loadedmetadata', handleLoadedMetadata);
      video.removeEventListener('playing', handlePlaying);
      video.removeEventListener('error', handleError as EventListener);
      video.srcObject = null;
    };
  }, [participantId, stream, isVideoReady]);
  
  return (
    <div 
      className={`remote-video-container ${isKilled ? 'killed' : ''} ${isVideoReady ? 'ready' : 'loading'}`}
      data-participant-id={participantId}
      style={{
        position: 'relative',
        overflow: 'hidden',
        borderRadius: '8px',
        backgroundColor: '#000'
      }}
    >
      <video
        ref={videoRef}
        autoPlay
        playsInline
        muted
        style={{
          width: '100%',
          height: '100%',
          objectFit: 'cover',
          display: 'block',
          minWidth: '160px',
          minHeight: '120px',
          backgroundColor: '#000',
          border: isVideoReady ? '1px solid transparent' : '1px solid #555'
        }}
      />
      
      {!isVideoReady && (
        <div style={{
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          color: '#fff',
          background: 'rgba(0,0,0,0.7)'
        }}>
          –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...
        </div>
      )}
    </div>
  );
};