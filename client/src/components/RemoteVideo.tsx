import { useEffect, useRef, useState } from "react";

interface RemoteVideoProps {
  participantId: string;
  stream: MediaStream;
}

export const RemoteVideo = ({ participantId, stream }: RemoteVideoProps) => {
  const [isVideoReady, setIsVideoReady] = useState(false);
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);

  // –û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ
  useEffect(() => {
    const video = videoRef.current;
    if (!video || !stream) return;

    console.log(`üé• RemoteVideo setup for ${participantId}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫–∞
    const videoTrack = stream.getVideoTracks()[0];
    if (videoTrack) {
      console.log(`üîç Track details for ${participantId}:`, {
        id: videoTrack.id,
        enabled: videoTrack.enabled,
        muted: videoTrack.muted,
        readyState: videoTrack.readyState
      });
      
      // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ç—Ä–µ–∫ –≤–∫–ª—é—á–µ–Ω
      videoTrack.enabled = true;
    }

    video.srcObject = stream;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    video.onloadedmetadata = () => {
      console.log(`üîç onloadedmetadata triggered for ${participantId}`);
      
      const track = stream.getVideoTracks()[0];
      if (track) {
        console.log(`üé• Track details on load:`, {
          id: track.id,
          kind: track.kind,
          enabled: track.enabled,
          muted: track.muted,
          readyState: track.readyState,
          dimensions: `${video.videoWidth}x${video.videoHeight}`
        });
  
        // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        track.enabled = true;
  
        // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑–≤–∞—Ç—å load() –ø–µ—Ä–µ–¥ play()
        video.load();
        video
          .play()
          .then(() => {
            console.log(`‚ñ∂Ô∏è Video play() successful for ${participantId}`);
            setIsVideoReady(true);
          })
          .catch((err) => console.warn(`‚ö†Ô∏è Video play() failed for ${participantId}:`, err));
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
      if (video.videoWidth > 0 && video.videoHeight > 0) {
        setIsVideoReady(true);
      }
    };
  
    // Fallback –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ onloadedmetadata –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
    setTimeout(() => {
      if (video.readyState < 2) {
        console.log(`‚åõ Video not ready for ${participantId}, forcing play()`);
        video.load();
        video
          .play()
          .then(() => {
            console.log(`‚ñ∂Ô∏è Video force-play() OK for ${participantId}`);
            setIsVideoReady(true);
          })
          .catch((err) => console.warn(`‚ö†Ô∏è Video force-play() failed:`, err));
      }
    }, 500);

    return () => {
      video.onloadedmetadata = null;
      video.srcObject = null;
    };
  }, [stream, participantId]);

  // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Å canvas –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø—Ä–∏—Ö–æ–¥—è—Ç –ª–∏ –∫–∞–¥—Ä—ã
  useEffect(() => {
    const video = videoRef.current;
    const canvas = canvasRef.current;
    if (!video || !canvas || !stream) return;

    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ canvas
    canvas.width = 160;
    canvas.height = 120;

    console.log(`üñºÔ∏è Canvas debug started for ${participantId}`);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∫–∞–¥—Ä–∞
    const drawFrame = () => {
      try {
        if (video.videoWidth > 0 && video.videoHeight > 0) {
          ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
          console.log(`üé® Drew frame for ${participantId}: ${video.videoWidth}x${video.videoHeight}`);
        } else {
          // –†–∏—Å—É–µ–º –∫—Ä–∞—Å–Ω—ã–π –∫—Ä–µ—Å—Ç –µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤
          ctx.fillStyle = 'black';
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          ctx.strokeStyle = 'red';
          ctx.lineWidth = 3;
          ctx.beginPath();
          ctx.moveTo(0, 0);
          ctx.lineTo(canvas.width, canvas.height);
          ctx.moveTo(canvas.width, 0);
          ctx.lineTo(0, canvas.height);
          ctx.stroke();
        }
      } catch (e) {
        console.error(`Error drawing to canvas for ${participantId}:`, e);
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    const interval = setInterval(drawFrame, 500);

    return () => {
      clearInterval(interval);
    };
  }, [stream, participantId]);

  return (
    <div
      className={`remote-video-container ${isVideoReady ? 'ready' : 'loading'}`}
      data-participant-id={participantId}
      style={{
        position: 'relative',
        overflow: 'hidden',
        borderRadius: '8px',
        backgroundColor: '#000',
      }}
    >
      <video
        ref={videoRef}
        autoPlay
        playsInline
        // muted -- –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –º—É—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        style={{
          width: '100%',
          height: '100%',
          objectFit: 'cover',
          display: 'block',
          minWidth: '160px',
          minHeight: '120px',
          backgroundColor: '#000',
          border: isVideoReady ? '1px solid transparent' : '1px solid #555',
        }}
      />

      {/* –û—Ç–ª–∞–¥–æ—á–Ω—ã–π canvas –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–¥—Ä–æ–≤ */}
      <canvas
        ref={canvasRef}
        style={{
          position: 'absolute',
          bottom: '8px',
          right: '8px',
          border: '1px solid green',
          width: '160px',
          height: '120px',
          display: 'block',
          zIndex: 5,
        }}
      />

      {!isVideoReady && (
        <div
          style={{
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            color: '#fff',
            background: 'rgba(0,0,0,0.6)',
          }}
        >
          –û–∂–∏–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ...
        </div>
      )}
    </div>
  );
};
